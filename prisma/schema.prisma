//this is your prisma schema file,
//learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  EDITOR
  ADMIN
  SUPER_ADMIN
}

model Imagem {
  id        Int      @id @default(autoincrement())
  dados     Bytes
  tipoMime  String
  createdAt DateTime @default(now())

  perfilUsuario   Usuario?   @relation("ImagemPerfilUsuario")
  imagemNoticia   Noticia?   @relation("ImagemNoticia")
  imagemCategoria Categoria? @relation("ImagemCategoria")
}

model Usuario {
  id                   Int             @id @default(autoincrement())
  email                String          @unique
  username             String          @db.VarChar(30)
  senha                String          @db.Text
  role                 Role            @default(USER)
  biografia            String?         @db.Text
  localizacao          String?
  website              String?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  acessosNoticias      AcessoNoticia[]
  senhasAnteriores     SenhaAnterior[]
  noticias             Noticia[]
  comentarios          Comentario[]
  favoritos            Favorito[]
  podeComentar         Boolean         @default(true)
  tel                  String?         @db.VarChar(20)
  cep                  String?         @db.VarChar(10)
  bairro               String?         @db.VarChar(50)
  endereco             String?         @db.VarChar(100)
  enderecoComplemento  String?         @db.VarChar(100)
  imagemPerfilId       Int?            @unique
  imagemPerfil   Imagem? @relation("ImagemPerfilUsuario", fields: [imagemPerfilId], references: [id], onDelete: SetNull)
}

model Categoria {
  id        Int       @id @default(autoincrement())
  nome      String    @unique
  slug      String    @unique
  descricao String    @db.Text
  noticias  Noticia[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  imagemId Int?    @unique
  imagem   Imagem? @relation("ImagemCategoria", fields: [imagemId], references: [id], onDelete: SetNull)
}

model Noticia {
  id                  Int             @id @default(autoincrement())
  titulo              String
  slug                String          @unique
  conteudo            String          @db.Text
  resumo              String          @db.VarChar(300)
  publicado           Boolean         @default(false)
  dataPublicacao      DateTime?
  visualizacoes       Int             @default(0)
  autor               Usuario         @relation(fields: [autorId], references: [id])
  autorId             Int
  categoriaId         Int
  categoria           Categoria       @relation(fields: [categoriaId], references: [id])
  tags                Tag[]
  comentarios         Comentario[]
  favoritos           Favorito[]
  acessos             AcessoNoticia[]
  comentariosAtivados Boolean         @default(true)
  contagemComentarios Int             @default(0)
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  imagemId Int?                       @unique
  imagem   Imagem?                    @relation("ImagemNoticia", fields: [imagemId], references: [id], onDelete: SetNull)
}

model Tag {
  id        Int       @id @default(autoincrement())
  nome      String    @unique
  slug      String    @unique
  noticias  Noticia[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comentario {
  id                Int          @id @default(autoincrement())
  conteudo          String       @db.Text
  autor             Usuario      @relation(fields: [autorId], references: [id])
  autorId           Int
  noticia           Noticia      @relation(fields: [noticiaId], references: [id])
  noticiaId         Int
  comentarioPaiId   Int?
  comentarioPai     Comentario?  @relation("RespostasComentario", fields: [comentarioPaiId], references: [id])
  respostas         Comentario[] @relation("RespostasComentario")
  aprovado          Boolean      @default(false)
  editado           Boolean      @default(false)
  dataEdicao        DateTime?
  upvotes           Int          @default(0)
  downvotes         Int          @default(0)
  sinalizado        Boolean      @default(false)
  motivoSinalizacao String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
}

model Favorito {
  id        Int      @id @default(autoincrement())
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])
  usuarioId Int
  noticia   Noticia  @relation(fields: [noticiaId], references: [id])
  noticiaId Int
  createdAt DateTime @default(now())

  @@unique([usuarioId, noticiaId])
}

model AcessoNoticia {
  id        Int      @id @default(autoincrement())
  noticia   Noticia  @relation(fields: [noticiaId], references: [id])
  noticiaId Int
  usuario   Usuario? @relation(fields: [usuarioId], references: [id])
  usuarioId Int?
  ip        String?  @db.VarChar(45)
  createdAt DateTime @default(now())

  @@index([noticiaId])
  @@index([createdAt])
}

model SenhaAnterior {
  id        Int      @id @default(autoincrement())
  senha     String
  createdAt DateTime @default(now())
  usuarioId Int
  usuario   Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
}
